<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MACE on BOGHTW</title><link>https://liubaoshuai1402.github.io/series/mace/</link><description>Recent content in MACE on BOGHTW</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 29 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://liubaoshuai1402.github.io/series/mace/index.xml" rel="self" type="application/rss+xml"/><item><title>绘制DFT数据和MACE预测值的关系图</title><link>https://liubaoshuai1402.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%BF/dft%E6%95%B0%E6%8D%AEvsmace%E9%A2%84%E6%B5%8B%E5%80%BC/</link><pubDate>Thu, 29 May 2025 00:00:00 +0000</pubDate><guid>https://liubaoshuai1402.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%BF/dft%E6%95%B0%E6%8D%AEvsmace%E9%A2%84%E6%B5%8B%E5%80%BC/</guid><description>&lt;h1 id="绘制dft数据和mace预测值的关系图"&gt;绘制DFT数据和MACE预测值的关系图&lt;/h1&gt;
&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;本文主要搬运一下
&lt;a href="https://colab.research.google.com/drive/1ZrTuTvavXiCxTFyjBV4GqlARxgFwYAtX#scrollTo=v75wGSfOw9dA" target="_blank" rel="noopener noreferrer" &gt;MACE教程其一&lt;/a&gt;
，记录一下如何绘制DFT数据和MACE预测值的关系图，用于评估模型的准确性，加上一些自己的理解。&lt;/p&gt;
&lt;p&gt;软件：ASE、
&lt;a href="https://github.com/imagdau/aseMolec" target="_blank" rel="noopener noreferrer" &gt;aseMolec&lt;/a&gt;
、matplotlib、numpy&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：本文仅供参考，欢迎指出错误或分享补充。无能力提供任何指导，&lt;strong&gt;求教者切勿留言&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id="准备评估函数"&gt;准备评估函数&lt;/h2&gt;
&lt;p&gt;MACE官方写好了评估的命令行脚本，我们这里给它一个虚拟参数，方便以编程的方式调用它。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from mace.cli.eval_configs import main as mace_eval_configs_main
import sys

def eval_mace(configs, model, output):
 sys.argv = [&amp;quot;program&amp;quot;, &amp;quot;--configs&amp;quot;, configs, &amp;quot;--model&amp;quot;, model, &amp;quot;--output&amp;quot;, output]
 mace_eval_configs_main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里的&lt;code&gt;eval_mace&lt;/code&gt;函数接受三个参数，数据集如训练集、测试集的路径、训练好的模型的路径以及输出的文件命。&lt;/p&gt;
&lt;h2 id="评估数据集"&gt;评估数据集&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;#evaluate the training set
eval_mace(configs=&amp;quot;data/solvent_xtb_train_200.xyz&amp;quot;,
 model=&amp;quot;MACE_models/mace01_run-123_stagetwo.model&amp;quot;,
 output=&amp;quot;tests/mace01/solvent_train.xyz&amp;quot;)

#evaluate the test set
eval_mace(configs=&amp;quot;data/solvent_xtb_test.xyz&amp;quot;,
 model=&amp;quot;MACE_models/mace01_run-123_stagetwo.model&amp;quot;,
 output=&amp;quot;tests/mace01/solvent_test.xyz&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，MACE就会对数据集进行评估，因为其实DFT数据是已有的，主要是在输出文件中，补上MACE的预测值。&lt;/p&gt;
&lt;h2 id="画图"&gt;画图&lt;/h2&gt;
&lt;p&gt;然后就可以用aseMolec的如下代码进行画图了&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from aseMolec import pltProps as pp
from ase.io import read
import matplotlib.pyplot as plt
from aseMolec import extAtoms as ea
import numpy as np

def plot_RMSEs(db, labs):
 ea.rename_prop_tag(db, 'MACE_energy', 'energy_mace') #Backward compatibility
 ea.rename_prop_tag(db, 'MACE_forces', 'forces_mace') #Backward compatibility

 plt.figure(figsize=(9,6), dpi=100)
 plt.subplot(1,3,1)
 pp.plot_prop(ea.get_prop(db, 'bind', '_xtb', True).flatten(), \
 ea.get_prop(db, 'bind', '_mace', True).flatten(), \
 title=r'Energy $(\rm eV/atom)$ ', labs=labs, rel=False)
 plt.subplot(1,3,2)
 pp.plot_prop(ea.get_prop(db, 'info', 'energy_xtb', True).flatten(), \
 ea.get_prop(db, 'info', 'energy_mace', True).flatten(), \
 title=r'Energy $(\rm eV/atom)$ ', labs=labs, rel=False)
 plt.subplot(1,3,3)
 pp.plot_prop(np.concatenate(ea.get_prop(db, 'arrays', 'forces_xtb')).flatten(), \
 np.concatenate(ea.get_prop(db, 'arrays', 'forces_mace')).flatten(), \
 title=r'Forces $\rm (eV/\AA)$ ', labs=labs, rel=False)
 plt.tight_layout()
 return

train_data = read('tests/mace01/solvent_train.xyz', ':')
test_data = train_data[:3]+read('tests/mace01/solvent_test.xyz', ':') #append the E0s for computing atomization energy errors

plot_RMSEs(train_data, labs=['XTB', 'MACE'])
plot_RMSEs(test_data, labs=['XTB', 'MACE'])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;plot_RMSEs&lt;/code&gt;函数中首先把标签重命名了一下，因为MACE的源代码&lt;code&gt;mace_eval_configs_main()&lt;/code&gt;部分默认打的标签是&lt;code&gt;MACE_&lt;/code&gt;+什么什么的。&lt;/p&gt;</description></item><item><title>机器学习势MACE的输入文件</title><link>https://liubaoshuai1402.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%BF/mace2/</link><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid>https://liubaoshuai1402.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%BF/mace2/</guid><description>&lt;h1 id="机器学习势mace的输入文件"&gt;机器学习势MACE的输入文件&lt;/h1&gt;
&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;不同MACE版本的参数设置会有一定的调查，注意查看自己的MACE版本。这里是0.3.13版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：本文仅供参考，欢迎指出错误或分享补充。无能力提供任何指导，&lt;strong&gt;求教者切勿留言&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id="在超算上用slurm提交python任务"&gt;在超算上用slurm提交python任务&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-sh"&gt;#!/bin/bash
#SBATCH -o job.%j.out
#SBATCH -J lmp_job_gpu
#SBATCH --partition=gpu 
#SBATCH -N 1 
#SBATCH -G 1
#SBATCH --gres=gpu:1
#SBATCH --exclusive


export PATH=/home-ssd/Users/nsgm_zcx/openmpi-5.0.5/build/bin:$PATH
export LD_LIBRARY_PATH=/home-ssd/Users/nsgm_zcx/openmpi-5.0.5/build/lib:$LD_LIBRARY_PATH
export PATH=/home-ssd/Users/nsgm_zcx/lammps-develop/build-mliap:$PATH

source /home-ssd/Users/nsgm_zcx/miniconda3/etc/profile.d/conda.sh
conda activate cuda

mace_run_train --config parameters.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;前面几行是为了激活lammps和openmpi，在这里没啥用。&lt;/p&gt;
&lt;p&gt;重要的是要在sh脚本里激活conda，然后用&lt;code&gt;mace_run_train&lt;/code&gt;命令行脚本来提交训练任务。&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;--config&lt;/code&gt;参数和一个yaml文件来提供训练参数。&lt;/p&gt;
&lt;p&gt;以下是&lt;code&gt;parameters.yaml&lt;/code&gt;的内容&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;name: YSZH_MACE_model
seed: 123
device: cuda
train_file: train.xyz
valid_fraction: 0.2
test_file: test.xyz
compute_forces: True
compute_stress: True
energy_key: energy_vasp
forces_key: forces_vasp
stress_key: stress_vasp
E0s: 'isolated'
hidden_irreps: '64x0e + 64x1o'
r_max: 4.0
batch_size: 20
max_num_epochs: 600
swa: True
start_swa: 480
ema: True
ema_decay: 0.99
default_dtype: float32
lr: 0.01
scaling: rms_forces_scaling
multiheads_finetuning: False
enable_cueq: True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要使用&lt;code&gt;mliap&lt;/code&gt;，就必须打开参数&lt;code&gt;enable_cueq: True&lt;/code&gt;，并确保python环境中安装了&lt;code&gt;cuEquivariance&lt;/code&gt;和&lt;code&gt;cupy&lt;/code&gt;。&lt;/p&gt;</description></item></channel></rss>