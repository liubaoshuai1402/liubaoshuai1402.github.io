<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BOGHTW</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on BOGHTW</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 12 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>径向分布函数（RDF）-OVITO</title>
      <link>http://localhost:1313/%E5%88%86%E5%AD%90%E5%8A%A8%E5%8A%9B%E5%AD%A6/rdf_ovito/</link>
      <pubDate>Mon, 12 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/%E5%88%86%E5%AD%90%E5%8A%A8%E5%8A%9B%E5%AD%A6/rdf_ovito/</guid>
      <description>&lt;h1 id=&#34;径向分布函数rdf计算-by-ovito&#34;&gt;径向分布函数（RDF）计算 by OVITO&lt;/h1&gt;&#xA;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://docs.ovito.org/python/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;OVITO Python Reference — OVITO Python Reference 3.12.3 documentation&lt;/a&gt;&#xA; 是一个开源且功能强大的分子动力学后处理软件包。&lt;/p&gt;&#xA;&lt;p&gt;本文将介绍如何利用 OVITO python module 计算单个结构以及一段轨迹（多个结构）内的径向分布函数。&lt;/p&gt;&#xA;&lt;p&gt;适用于无机非晶体，其他体系慎用。&lt;/p&gt;&#xA;&lt;p&gt;软件：OVITO、matplotlib、numpy&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：本文仅供学习交流，欢迎指出错误或分享新实现。无能力提供任何指导，&lt;strong&gt;求教者切勿留言&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-partial-rdfs-of-a-single-crystal-structure&#34;&gt;The partial RDFs of a single crystal structure&lt;/h2&gt;&#xA;&lt;h3 id=&#34;代码展示&#34;&gt;代码展示&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#这段代码用于计算 RDF by OVITO&#xA;from ovito.io import import_file&#xA;from ovito.modifiers import CoordinationAnalysisModifier&#xA;import numpy as np&#xA;&#xA;#导入一个氧化锆（ZrO2）的cif文件，所有OVITO支持的输入文件格式都可以（确保这个.py文件的路径下有这样一个cif文件，也可以稍微修改指定结构路径）&#xA;pipeline = import_file(&amp;quot;ZrO.cif&amp;quot;)&#xA;&#xA;#施加一个名叫 CoordinationAnalysisModifier 的修饰器，cutoff用于控制截断半径，number_of_bins用于控制网格细分度（大小100-1000内都可以试试）&#xA;pipeline.modifiers.append(CoordinationAnalysisModifier(cutoff = 5.0, number_of_bins = 500,partial=True))&#xA;&#xA;#进行计算&#xA;rdf_table = pipeline.compute().tables[&#39;coordination-rdf&#39;]&#xA;&#xA;#得到用于画图的横纵坐标，默认第一列是x轴数据，其余列是y轴数据&#xA;total_rdf = rdf_table.xy()&#xA;&#xA;#记录total_rdf中y轴数据对应是什么类型的pair-wise&#xA;#这个例子中，输出为：&#xA;#g(r) for pair-wise type combination O-O:&#xA;#g(r) for pair-wise type combination O-Zr:&#xA;#g(r) for pair-wise type combination Zr-Zr:&#xA;#说明total_rdf是一个四列的数据，第一列是x轴坐标（其实是bin），第二列就是不同pair-wise的RDF数据&#xA;rdf_names = rdf_table.y.component_names&#xA;for component, name in enumerate(rdf_names):&#xA;    print(&amp;quot;g(r) for pair-wise type combination %s:&amp;quot; % name)&#xA;    &#xA;#将total_rdf保存为txt文件，用于后续画图&#xA;np.savetxt(&amp;quot;total_rdf.txt&amp;quot;, total_rdf)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#这段代码用于绘图&#xA;import numpy as np&#xA;import matplotlib.pyplot as plt&#xA;&#xA;rdf_table = np.loadtxt(&#39;total_rdf.txt&#39;)&#xA;&#xA;#g(r) for pair-wise type combination O-O:&#xA;#g(r) for pair-wise type combination O-Zr:&#xA;#g(r) for pair-wise type combination Zr-Zr:&#xA;&#xA;#这里取的是 total_rdf.txt 中的第一列（对应[:,0]）和第三列（对应[:,2]），所以绘制的是 Zr-O pair-wise的partial RDF&#xA;plt.plot(rdf_table[:,0], rdf_table[:,2])&#xA;&#xA;#matplotlib的常规设置，问问万能的小迪老师吧&#xA;title_font = {&#39;fontsize&#39;: 24, &#39;fontfamily&#39;: &#39;Times New Roman&#39;}&#xA;xlabel_font = {&#39;fontsize&#39;: 22, &#39;fontfamily&#39;: &#39;Times New Roman&#39;}&#xA;ylabel_font = {&#39;fontsize&#39;: 22, &#39;fontfamily&#39;: &#39;Times New Roman&#39;}&#xA;&#xA;plt.title(&amp;quot;RDF Zr-O&amp;quot;, fontdict=title_font,pad=8)&#xA;plt.xlabel(xlabel=&#39;distance r&#39;,fontdict=xlabel_font,loc=&#39;center&#39;,labelpad=8)&#xA;plt.ylabel(ylabel=&#39;g(r)&#39;,fontdict=ylabel_font,loc=&#39;center&#39;,labelpad=8)&#xA;plt.tick_params(axis=&#39;both&#39;, which=&#39;major&#39;, labelsize=16, direction=&#39;in&#39;)&#xA;&#xA;ax = plt.subplot()&#xA;&#xA;#因为只有一个静态结构，pair-wise的某些峰很高，所以这里的y轴坐标上限设置大一些，为200，可灵活改变&#xA;#x轴设置为6，稍大于截断半径cutoff即可，因为本身也只在截断半径以内统计&#xA;ax.set_ylim(0,200)&#xA;plt.xlim(0,6)&#xA;&#xA;fig = plt.gcf()&#xA;&#xA;fig.set_size_inches(1200/100, 800/100)&#xA;plt.savefig(&#39;output.png&#39;, dpi=100)&#xA;&#xA;plt.show()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;结果展示&#34;&gt;结果展示&lt;/h3&gt;&#xA;&lt;img src=&#34;https://xiaoxiaobuaigugujiao.oss-cn-beijing.aliyuncs.com/img/output.png&#34;/&gt;&#xA;&lt;h2 id=&#34;the-partial-rdfs-of-trajectories&#34;&gt;The partial RDFs of trajectories&lt;/h2&gt;&#xA;&lt;h3 id=&#34;代码展示-1&#34;&gt;代码展示&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#这段代码用于计算一定时间内（一段轨迹）的平均 RDFs&#xA;from ovito.io import import_file&#xA;from ovito.modifiers import CoordinationAnalysisModifier,TimeAveragingModifier&#xA;import numpy as np&#xA;&#xA;#读入轨迹文件，这里是利用 VASP 进行 AIMD 后得到的 XDATCAR 文件&#xA;pipeline = import_file(&amp;quot;XDATCAR&amp;quot;)&#xA;&#xA;#打印轨迹中的结构数&#xA;print(&amp;quot;Number of MD frames:&amp;quot;, pipeline.num_frames)&#xA;&#xA;#添加修饰器，与单个晶体结构相比，多了 TimeAveragingModifier 修饰器&#xA;pipeline.modifiers.append(CoordinationAnalysisModifier(cutoff = 5.0, number_of_bins = 500,partial=True))&#xA;pipeline.modifiers.append(TimeAveragingModifier(operate_on=&#39;table:coordination-rdf&#39;))&#xA;&#xA;#计算 RDFs 数据&#xA;total_rdf = pipeline.compute().tables[&#39;coordination-rdf[average]&#39;].xy()&#xA;&#xA;#记录pair-wise类型&#xA;rdf_names = pipeline.compute().tables[&#39;coordination-rdf[average]&#39;].y.component_names&#xA;for name in rdf_names:&#xA;    print(&amp;quot;g(r) for pair-wise type combination %s:&amp;quot; % name)&#xA;&#xA;#输出数据，用于后续绘图，不再重复&#xA;np.savetxt(&#39;rdf.txt&#39;, total_rdf, delimiter=&#39;\t&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;ovito小知识&#34;&gt;OVITO小知识&lt;/h2&gt;&#xA;&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/search/</guid>
      <description></description>
    </item>
    <item>
      <title>Archives</title>
      <link>http://localhost:1313/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/archives/</guid>
      <description></description>
    </item>
    <item>
      <title>枭枭不爱咕咕叫</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;p&gt;保藏秘密、分享知识，人间美德。谦谦君子，温润如是。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
