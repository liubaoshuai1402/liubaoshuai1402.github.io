<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASE on BOGHTW</title>
    <link>https://liubaoshuai1402.github.io/series/ase/</link>
    <description>Recent content in ASE on BOGHTW</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 29 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://liubaoshuai1402.github.io/series/ase/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>绘制DFT数据和MACE预测值的关系图</title>
      <link>https://liubaoshuai1402.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%BF/dft%E6%95%B0%E6%8D%AEvsmace%E9%A2%84%E6%B5%8B%E5%80%BC/</link>
      <pubDate>Thu, 29 May 2025 00:00:00 +0000</pubDate>
      <guid>https://liubaoshuai1402.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%BF/dft%E6%95%B0%E6%8D%AEvsmace%E9%A2%84%E6%B5%8B%E5%80%BC/</guid>
      <description>&lt;h1 id=&#34;绘制dft数据和mace预测值的关系图&#34;&gt;绘制DFT数据和MACE预测值的关系图&lt;/h1&gt;&#xA;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;本文主要搬运一下&#xD;&#xA;&lt;a href=&#34;https://colab.research.google.com/drive/1ZrTuTvavXiCxTFyjBV4GqlARxgFwYAtX#scrollTo=v75wGSfOw9dA&#34;  target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;MACE教程其一&lt;/a&gt;&#xD;&#xA;，记录一下如何绘制DFT数据和MACE预测值的关系图，用于评估模型的准确性，加上一些自己的理解。&lt;/p&gt;&#xA;&lt;p&gt;软件：ASE、&#xD;&#xA;&lt;a href=&#34;https://github.com/imagdau/aseMolec&#34;  target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;aseMolec&lt;/a&gt;&#xD;&#xA;、matplotlib、numpy&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：本文仅供参考，欢迎指出错误或分享补充。无能力提供任何指导，&lt;strong&gt;求教者切勿留言&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;准备评估函数&#34;&gt;准备评估函数&lt;/h2&gt;&#xA;&lt;p&gt;MACE官方写好了评估的命令行脚本，我们这里给它一个虚拟参数，方便以编程的方式调用它。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mace.cli.eval_configs import main as mace_eval_configs_main&#xD;&#xA;import sys&#xD;&#xA;&#xD;&#xA;def eval_mace(configs, model, output):&#xD;&#xA;    sys.argv = [&amp;quot;program&amp;quot;, &amp;quot;--configs&amp;quot;, configs, &amp;quot;--model&amp;quot;, model, &amp;quot;--output&amp;quot;, output]&#xD;&#xA;    mace_eval_configs_main()&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;这里的&lt;code&gt;eval_mace&lt;/code&gt;函数接受三个参数，数据集如训练集、测试集的路径、训练好的模型的路径以及输出的文件命。&lt;/p&gt;&#xA;&lt;h2 id=&#34;评估数据集&#34;&gt;评估数据集&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#evaluate the training set&#xD;&#xA;eval_mace(configs=&amp;quot;data/solvent_xtb_train_200.xyz&amp;quot;,&#xD;&#xA;          model=&amp;quot;MACE_models/mace01_run-123_stagetwo.model&amp;quot;,&#xD;&#xA;          output=&amp;quot;tests/mace01/solvent_train.xyz&amp;quot;)&#xD;&#xA;&#xD;&#xA;#evaluate the test set&#xD;&#xA;eval_mace(configs=&amp;quot;data/solvent_xtb_test.xyz&amp;quot;,&#xD;&#xA;          model=&amp;quot;MACE_models/mace01_run-123_stagetwo.model&amp;quot;,&#xD;&#xA;          output=&amp;quot;tests/mace01/solvent_test.xyz&amp;quot;)&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;这样，MACE就会对数据集进行评估，因为其实DFT数据是已有的，主要是在输出文件中，补上MACE的预测值。&lt;/p&gt;&#xA;&lt;h2 id=&#34;画图&#34;&gt;画图&lt;/h2&gt;&#xA;&lt;p&gt;然后就可以用aseMolec的如下代码进行画图了&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from aseMolec import pltProps as pp&#xD;&#xA;from ase.io import read&#xD;&#xA;import matplotlib.pyplot as plt&#xD;&#xA;from aseMolec import extAtoms as ea&#xD;&#xA;import numpy as np&#xD;&#xA;&#xD;&#xA;def plot_RMSEs(db, labs):&#xD;&#xA;    ea.rename_prop_tag(db, &#39;MACE_energy&#39;, &#39;energy_mace&#39;) #Backward compatibility&#xD;&#xA;    ea.rename_prop_tag(db, &#39;MACE_forces&#39;, &#39;forces_mace&#39;) #Backward compatibility&#xD;&#xA;&#xD;&#xA;    plt.figure(figsize=(9,6), dpi=100)&#xD;&#xA;    plt.subplot(1,3,1)&#xD;&#xA;    pp.plot_prop(ea.get_prop(db, &#39;bind&#39;, &#39;_xtb&#39;, True).flatten(), \&#xD;&#xA;                 ea.get_prop(db, &#39;bind&#39;, &#39;_mace&#39;, True).flatten(), \&#xD;&#xA;                 title=r&#39;Energy $(\rm eV/atom)$ &#39;, labs=labs, rel=False)&#xD;&#xA;    plt.subplot(1,3,2)&#xD;&#xA;    pp.plot_prop(ea.get_prop(db, &#39;info&#39;, &#39;energy_xtb&#39;, True).flatten(), \&#xD;&#xA;                 ea.get_prop(db, &#39;info&#39;, &#39;energy_mace&#39;, True).flatten(), \&#xD;&#xA;                 title=r&#39;Energy $(\rm eV/atom)$ &#39;, labs=labs, rel=False)&#xD;&#xA;    plt.subplot(1,3,3)&#xD;&#xA;    pp.plot_prop(np.concatenate(ea.get_prop(db, &#39;arrays&#39;, &#39;forces_xtb&#39;)).flatten(), \&#xD;&#xA;                 np.concatenate(ea.get_prop(db, &#39;arrays&#39;, &#39;forces_mace&#39;)).flatten(), \&#xD;&#xA;                 title=r&#39;Forces $\rm (eV/\AA)$ &#39;, labs=labs, rel=False)&#xD;&#xA;    plt.tight_layout()&#xD;&#xA;    return&#xD;&#xA;&#xD;&#xA;train_data = read(&#39;tests/mace01/solvent_train.xyz&#39;, &#39;:&#39;)&#xD;&#xA;test_data = train_data[:3]+read(&#39;tests/mace01/solvent_test.xyz&#39;, &#39;:&#39;) #append the E0s for computing atomization energy errors&#xD;&#xA;&#xD;&#xA;plot_RMSEs(train_data, labs=[&#39;XTB&#39;, &#39;MACE&#39;])&#xD;&#xA;plot_RMSEs(test_data, labs=[&#39;XTB&#39;, &#39;MACE&#39;])&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;code&gt;plot_RMSEs&lt;/code&gt;函数中首先把标签重命名了一下，因为MACE的源代码&lt;code&gt;mace_eval_configs_main()&lt;/code&gt;部分默认打的标签是&lt;code&gt;MACE_&lt;/code&gt;+什么什么的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何构建训练集用于训练机器学习势</title>
      <link>https://liubaoshuai1402.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%BF/mace1/</link>
      <pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate>
      <guid>https://liubaoshuai1402.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%BF/mace1/</guid>
      <description>&lt;h1 id=&#34;如何构建训练集用于训练机器学习势&#34;&gt;如何构建训练集用于训练机器学习势&lt;/h1&gt;&#xA;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;本文将介绍如何构建一个训练集，用于训练MACE势以及DP势。需要提前利用AIMD获取DFT数据集。这里的AIMD软件是VASP。&lt;/p&gt;&#xA;&lt;p&gt;软件：ASE、DeepMD-Kit&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：本文仅供参考，欢迎指出错误或分享补充。无能力提供任何指导，&lt;strong&gt;求教者切勿留言&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;构建mace势的训练集&#34;&gt;构建MACE势的训练集&lt;/h2&gt;&#xA;&lt;p&gt;MACE接受的训练集非常简单，一个&lt;code&gt;xyz&lt;/code&gt;文件，包含了各种构型和它们对应的DFT数据标签，以及单原子的DFT数据，需要额外的标签&lt;code&gt;config_type=IsolatedAtom&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;顺带一提，ASE可以输出一种所谓的&#xD;&#xA;&lt;a href=&#34;https://wiki.fysik.dtu.dk/ase/ase/io/formatoptions.html#extxyz&#34;  target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;Extended XYZ format&lt;/a&gt;&#xD;&#xA;，会把各种各样的信息（有点类似OVITO中的全局信息），放到&lt;code&gt;xyz&lt;/code&gt;文件的第二行。这一行会很长很长。MACE所采用的训练集输入格式就是它。&lt;/p&gt;&#xA;&lt;p&gt;假设我们要构建水分子的MACE势，当前所处的路径下，有两个文件夹。&lt;/p&gt;&#xA;&lt;p&gt;一个名为&lt;code&gt;H2O&lt;/code&gt;的文件夹，里面存放着进行第一性原理分子动力学后得到的&lt;code&gt;OUTCAR.tar.gz&lt;/code&gt;文件。路径为&lt;code&gt;H2O/OUTCAR.tar.gz&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;一个名为&lt;code&gt;IsolatedAtoms&lt;/code&gt;的文件夹，里面存放着涉及元素（这里是H、O）的单原子的单点能计算（ISPIN=2）。路径分别为&lt;code&gt;IsolatedAtoms/H/OUTCAR.tar.gz&lt;/code&gt;和&lt;code&gt;IsolatedAtoms/O/OUTCAR.tar.gz&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;代码展示&#34;&gt;代码展示&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from ase.io import read,write&#xD;&#xA;import random&#xD;&#xA;&#xD;&#xA;#定义一个简单的函数用于打标签,这里可以自由更改标签的名字&#xD;&#xA;def addlabel(configs,energy_label=&#39;energy_dft&#39;,forces_label=&#39;forces_dft&#39;,stress_label=&#39;stress_dft&#39;,is_isolated=False):&#xD;&#xA;    if is_isolated == False:&#xD;&#xA;        for at in configs:&#xD;&#xA;            at.info[energy_label] = at.get_potential_energy(force_consistent=True)&#xD;&#xA;            at.arrays[forces_label] = at.get_forces()&#xD;&#xA;            at.info[stress_label] = at.get_stress(voigt=True)&#xD;&#xA;    if is_isolated == True:&#xD;&#xA;        for at in configs:&#xD;&#xA;            at.info[&#39;config_type&#39;] = &#39;IsolatedAtom&#39;&#xD;&#xA;            at.info[energy_label] = at.get_potential_energy(force_consistent=True)&#xD;&#xA;            at.arrays[forces_label] = at.get_forces()&#xD;&#xA;            at.info[stress_label] = at.get_stress(voigt=True)&#xD;&#xA;&#xD;&#xA;#read()函数，这里，第一个参数是所读文件路径，第二个参数是切片slice&#xD;&#xA;IsolatedH = read(&#39;IsolatedAtoms/H/OUTCAR.tar.gz&#39;,&#39;:&#39;)&#xD;&#xA;IsolatedO = read(&#39;IsolatedAtoms/O/OUTCAR.tar.gz&#39;,&#39;:&#39;)&#xD;&#xA;IsolatedAtoms = IsolatedH + IsolatedO&#xD;&#xA;addlabel(configs=IsolatedAtoms,is_isolated=True)&#xD;&#xA;&#xD;&#xA;#这里的slice的意思是从第一个结构开始到最后一个结构，每100个结构取一个&#xD;&#xA;db = read(&#39;H2O/OUTCAR.tar.gz&#39;,&#39;::100&#39;)&#xD;&#xA;addlabel(configs=db)&#xD;&#xA;&#xD;&#xA;#打乱训练集，这对训练非常重要&#xD;&#xA;random.seed(42)&#xD;&#xA;random.shuffle(db)&#xD;&#xA;&#xD;&#xA;#将打过标签的数据集合并&#xD;&#xA;db = db + IsolatedAtoms&#xD;&#xA;write(&#39;trainset.xyz&#39;,db)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;这里有趣的一点是，为什么对于单个结构的&lt;code&gt;OUTCAR&lt;/code&gt;，也要进行切片：&lt;code&gt;IsolatedH = read(&#39;IsolatedAtoms/H/OUTCAR.tar.gz&#39;,&#39;:&#39;)&lt;/code&gt;，而不是&lt;code&gt;IsolatedH = read(&#39;IsolatedAtoms/H/OUTCAR.tar.gz&#39;)&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
